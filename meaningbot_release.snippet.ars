[INFO]

-------------------- MeaningBot V1.1 --------------------

Accountability bot written in Echo A.R.S. by Robert Tulley for Akira The Don's Discord Server.

-------------------- V1.1 Changelog (10/21/2018) --------------------
* Fixed .help command to tell users to use ".commands" instead.
* Split responses into a separate file

-------------------- V1.0 Changelog (9/24/2018) --------------------
+ Normal users can use .commit to make commitments, and .update to update on their commitments.
+ Will remind users in a DM if they post on the server without updating on their commitment in a while.
+ Users can use .remindme <interval> to change the interval in which they are reminded. Default is semiweekly
+ Random responses are given to commitments and updates to commitments.
+ Users can use the command .getsome to get a random message from the M E A N I N G G A N G
+ Added the following supermod-only commands: .setkey, .getkey, .goinactive, .getstats, .runars, .getchannelid, .getemojiid, .getuserid
+ Publicly accessible commands: .commit, .update, .remindme, .getsome, .viewcommitment
+ All commands can be viewed using .commands

[/INFO]

[CONFIG]

// Database Name
DB_NAME=Commitments

// Interval to remind in milliseconds
DAILY_REMIND_INTERVAL=93600000
SEMIWEEKLY_REMIND_INTERVAL=259200000
WEEKLY_REMIND_INTERVAL=604800000
BIWEEKLY_REMIND_INTERVAL=1209600000
MONTHLY_REMIND_INTERVAL=2419200000
QUARTERLY_REMIND_INTERVAL=7776000000
REMINDME_INTERVALS=daily/semiweekly/weekly/biweekly/monthly/quarterly/never

// Name of the role to which has permissions to set up MeaningBot and run diagnostics
MOD_ROLE=SUPERMOD ü¶∏üéØ,BOTMASTER
// ID of #the-path channel. Use .getchannelid to get this value.
PATH_CHANNEL_ID=479754367419940883

// Server emojis. Use .getemojiid to get these values.
GETAFTERIT_EMOJI=<:getafterit:479505436282847257>
AKIRA_HAPPY_EMOJI=<:akira_happy:465667255087136799>
JBP1_EMOJI=<:jbp1:460235087192129539>
JBP6_EMOJI=<:jbp6:460235086986608640>
FAYE_EMOJI=<:faye:460235086894333962>
MEANINGWAVE_EMOJI=<:meaningwave:460233509265604638>

// Response message
COMMITMENT_RESPONSE_MESSAGE={randars:bamf,commit0,commit1,commit2,commit3,commit4,commit5,commit6,commit7,commit8,commit9,commit10,commit11}
UPDATE_RESPONSE_MESSAGE={randars:bamf,getsome,update0,update1,update2,update3,update4,update5,update6,update7,update8,update9,update10,update11,update12,update13,update14}
GETSOME_RESPONSE_MESSAGE={randars:bamf,getsome,getsome0,getsome1,getsome2,getsome3,getsome4,getsome5,getsome6,getsome7,getsome8,getsome9,getsome10,getsome11,getsome12,getsome13,getsome14,getsome15,getsome16,getsome17,getsome18,getsome19,getsome20,getsome21,getsome22,getsome23,getsome24,getsome25,getsome26,getsome27,getsome28,getsome29,getsome30,getsome31,getsome32,getsome33,getsome34,getsome35}

[/CONFIG]

/* Initialize database if not already created */
[CREATE DB:$DB_NAME]

/* Remind */
[#CONTINUE#]
remind={init}
{arslock}
/* {redirect:$PATH_CHANNEL_ID} Moved to PMs instead.*/
{-mentions}
{m?$DB_NAME:{rawid}_last_update} := {timestamp:ms}
{pm}
**Ôº≠ÔΩÖÔΩÅÔΩéÔΩâÔΩéÔΩá Ôº¢ÔΩèÔΩî**
Hey, {user}, looks like you haven't posted an update on your commitment in a while:
`{r?$DB_NAME:{rawid}_commitment}`
Use the command `.update` to get back on track! $GETAFTERIT_EMOJI
It‚Äôs okay if you‚Äôve fallen off, failing is part of the process, accept the setback and get back to work!
If you would like to be reminded more or less often, use the following command:
`.remindme daily/semiweekly/weekly/biweekly/monthly/never`
Full command list: `.commands`

/* Remind interval checks */
[#CONTINUE#]
check_daily={init}
{arslock}
{-mentions}
Count.{r?$DB_NAME:{rawid}_last_update} < {math:{timestamp:ms} - $DAILY_REMIND_INTERVAL}?:{ars:remind}
Response.nil?:{stop}
[#CONTINUE#]
check_semiweekly={init}
{arslock}
{-mentions}
Count.{r?$DB_NAME:{rawid}_last_update} < {math:{timestamp:ms} - $SEMIWEEKLY_REMIND_INTERVAL}?:{ars:remind}
Response.nil?:{stop}
[#CONTINUE#]
check_weekly={init}
{arslock}
{-mentions}
Count.{r?$DB_NAME:{rawid}_last_update} < {math:{timestamp:ms} - $WEEKLY_REMIND_INTERVAL}?:{ars:remind}
Response.nil?:{stop}
[#CONTINUE#]
check_biweekly={init}
{arslock}
{-mentions}
Count.{r?$DB_NAME:{rawid}_last_update} < {math:{timestamp:ms} - $BIWEEKLY_REMIND_INTERVAL}?:{ars:remind}
Response.nil?:{stop}
[#CONTINUE#]
check_monthly={init}
{arslock}
{-mentions}
Count.{r?$DB_NAME:{rawid}_last_update} < {math:{timestamp:ms} - $MONTHLY_REMIND_INTERVAL}?:{ars:remind}
Response.nil?:{stop}
[#CONTINUE#]
check_quarterly={init}
{arslock}
{-mentions}
Count.{r?$DB_NAME:{rawid}_last_update} < {math:{timestamp:ms} - $QUARTERLY_REMIND_INTERVAL}?:{ars:remind}
Response.nil?:{stop}

[#CONTINUE#]
check_remind_cooldown={init}
{arslock}
{-mentions}
String.{r?$DB_NAME:{rawid}_remind_interval} == daily?:{ars:check_daily}
String.{r?$DB_NAME:{rawid}_remind_interval} == semiweekly?:{ars:check_semiweekly}
String.{r?$DB_NAME:{rawid}_remind_interval} == weekly?:{ars:check_weekly}
String.{r?$DB_NAME:{rawid}_remind_interval} == biweekly?:{ars:check_biweekly}
String.{r?$DB_NAME:{rawid}_remind_interval} == monthly?:{ars:check_monthly}
String.{r?$DB_NAME:{rawid}_remind_interval} == quarterly?:{ars:check_quarterly}
Response.nil?:{stop}

[#CONTINUE#]
default_reminding_interval={init}
{arslock}
{-mentions}
DB:$DB_NAME.{rawid}_remind_interval?:$COMMITMENT_RESPONSE_MESSAGE
Response.nil?:{m?$DB_NAME:{rawid}_remind_interval} := semiweekly{ars:rand_commitment_response}

/* Commit */
[#CONTINUE#]
rand_commitment_response={init}
{arslock}
$COMMITMENT_RESPONSE_MESSAGE

[#CONTINUE#]
commit={init}
{arslock}
{-mentions}
{m?$DB_NAME:{rawid}_commitment} := {params}
{m?$DB_NAME:{rawid}_last_update} := {timestamp:ms}
{ars:default_reminding_interval}

/* Update  */
[#CONTINUE#]
update={init}
{arslock}
{-mentions}
{m?$DB_NAME:{rawid}_last_update} := {timestamp:ms}
$UPDATE_RESPONSE_MESSAGE

[#CONTINUE#]
check_can_update={init}
{arslock}
{-mentions}
DB:$DB_NAME.{rawid}_last_update?:{ars:update}
Response.nil?: You haven't made a commitment yet! Use `.commit` to make a commitment

/* Remindme  */
[#CONTINUE#]
remindme={init}
{arslock}
{-mentions}
String.{params} == daily?:I‚Äôll remind you to post a .update every day if you forget{m?$DB_NAME:{rawid}_remind_interval} := {params}
String.{params} == semiweekly?:I‚Äôll remind you to post a .update every three days if you forget{m?$DB_NAME:{rawid}_remind_interval} := {params}
String.{params} == weekly?:I‚Äôll remind you to post a .update every week if you forget{m?$DB_NAME:{rawid}_remind_interval} := {params}
String.{params} == biweekly?:I‚Äôll remind you to post a .update every two weeks if you forget{m?$DB_NAME:{rawid}_remind_interval} := {params}
String.{params} == monthly?:I‚Äôll remind you to post a .update every month if you forget{m?$DB_NAME:{rawid}_remind_interval} := {params}
String.{params} == quarterly?:I‚Äôll remind you to post a .update every three months if you forget{m?$DB_NAME:{rawid}_remind_interval} := {params}
String.{params} == never?:Got it, no more reminders, I‚Äôll be here waiting if you want to be reminded again!{m?$DB_NAME:{rawid}_remind_interval} := {params}
Response.nil?:Invalid Entry. Use `.remindme $REMINDME_INTERVALS`

[#CONTINUE#]
check_can_remindme={init}
{arslock}
{-mentions}
DB:$DB_NAME.{rawid}_last_update?:{ars:remindme}
Response.nil?: You haven't made a commitment yet! Use `.commit` to make a commitment

/* Viewcommitment */

[#CONTINUE#]
show_commitment={init}
{-mentions}
Username: `{/user}`
Commitment: `{r?$DB_NAME:{rawid}_commitment}`
Reminding interval: `{r?$DB_NAME:{rawid}_remind_interval}`
Last update: `{math:({timestamp:ms} - {r?$DB_NAME:{rawid}_last_update}) / 1000 / 60 / 60} hours ago`

/* .commands responses */
[#CONTINUE#]
pm_mod_cmds={init}
{arslock}
{-mentions}
{req:$MOD_ROLE}
{pm}
**Supermod-only commands:**
`.setkey <key> <value>` - Changes a value in the database
`.getkey <key>` - Retrieves a value in the database
`.view -db Commitments` - Views the contents of the database
`.goinactive [@user]` - Sets yourself or another user as inactive to test the reminding feature
`.getstats [@user]` - Gets your stats, or the stats of another user, from the Commitments database.
`.getchannelid` - Get the ID of the channel the message is being posted in
`.getemojiid <emoji>` - Get the ID of an emoji
`.getuserid [@user]` - Gets your ID, or the ID of another user.
`.runars <ruleName>` - Runs any ARS rule

[#CONTINUE#]
pm_cmds={init}
{arslock}
{-mentions}
{pm}
**MeaningBot Commands**
`.commit I am going to be a bad motherfucker` - Make a commitment
`.update I was a bad motherfucker today` - Post an update for everyone to see
`.remindme $REMINDME_INTERVALS` - Change the interval in which you are reminded about your commitment
`.getsome` - Random message from the Ôº∞Ôº°Ôº¥Ôº® ÔºßÔº°ÔºÆÔºß
`.viewcommitment` - Shows the status of your commitment
{ars:pm_mod_cmds}

/* User commands */
[#CONTINUE#]
&.commands={init}
/* Mentions are enabled! If you want to send someone the commands, I guess that is fine.*/
$GETAFTERIT_EMOJI Sent you a DM! $GETAFTERIT_EMOJI
{ars:pm_cmds}

[#CONTINUE#]
&.commit {params}={init}
Channel.the-path?:{ars:commit}
Response.nil?:Must be in #the-path channel

[#CONTINUE#]
&.update={init}
Channel.the-path?:{ars:check_can_update}
Response.nil?:Must be in #the-path channel

[#CONTINUE#]
&.remindme {params}={init}
{-mentions}
Channel.the-path?:{ars:check_can_remindme}
Response.nil?:Must be in #the-path channel

[#CONTINUE#]
&.getsome={init}
$GETSOME_RESPONSE_MESSAGE

[#CONTINUE#]
&.viewcommitment={init}
{-mentions}
DB:$DB_NAME.{rawid}_last_update?:{ars:show_commitment}
Response.nil?: You haven't made a commitment yet! Use `.commit` to make a commitment

/* Mod-only commands */
[#CONTINUE#]
&.setkey {params}={init}
{req:$MOD_ROLE}
{m?$DB_NAME:{/p0}}:={/p1}
Key set.

[#CONTINUE#]
&.getkey {params}={init}
{req:$MOD_ROLE}
Key retrieved:
`{r?$DB_NAME:{params}}`

[#CONTINUE#]
&.getchannelid={init}
{req:$MOD_ROLE}
`{chan}`

[#CONTINUE#]
&.getemojiid {params}={init}
{req:$MOD_ROLE}
`{params}`

[#CONTINUE#]
&.getuserid={init}
{req:$MOD_ROLE}
/* Mentions are enabled, so @ing a user as a parameter will also work */
`{rawid}`

[#CONTINUE#]
&.goinactive={init}
{req:$MOD_ROLE}
/* Mentions are enabled, so @ing a user as a parameter will also work */
{m?$DB_NAME:{rawid}_last_update} := 0
{/user} will be reminded next time he/she posts or reacts in this server.

[#CONTINUE#]
&.getstats {params}={init}
{req:$MOD_ROLE}
/* Mentions are enabled */
Username: `{/user}`
Raw ID: `{rawid}`
Commitment: `{r?$DB_NAME:{rawid}_commitment}`
Last update: `{r?$DB_NAME:{rawid}_last_update}`
Reminding interval: `{r?$DB_NAME:{rawid}_remind_interval}`

[#CONTINUE#]
&.runars {params}={init}
{req:$MOD_ROLE}
{ars:{params}}

/* General response events */
[#CONTINUE#]
&{:}(....)={init}
{-mentions}
DB:$DB_NAME.{rawid}_commitment?:{ars:check_remind_cooldown}
Response.nil?:{stop}

[#CONTINUE#]
on_reaction={init}
{Event:ReactionAdd}
{-mentions}
DB:$DB_NAME.{rawid}_commitment?:{ars:check_remind_cooldown}
Response.nil?:{stop}

/* Disambiguate .help */
[#CONTINUE#]
&.help={init}
{-mentions}
{user} If you are looking for Ôº≠ÔΩÖÔΩÅÔΩéÔΩâÔΩéÔΩá Ôº¢ÔΩèÔΩî's commands, use `.commands` instead